export declare type ConstructorArgs<T> = T extends new (...args: infer A) => never ? A : never;
export declare type Constructor<T extends unknown = unknown> = new (...args: Array<unknown>) => T;
declare type ObjectKey = string | number | symbol;
export declare type PlainObject<TKey extends keyof any = string | symbol, TProp = any> = Record<TKey, TProp>;
export declare type TypeMapArray<TKey extends ObjectKey, TType = any> = TType | Record<TKey, TType> | Array<TType>;
export declare type Primitive = string | number | bigint | boolean | symbol;
export declare type AnyPrimitive = TypeMapArray<ObjectKey, Primitive>;
export declare type PlainObjectOrArray = TypeMapArray<ObjectKey, PlainObject>;
export declare type AnyConstructor = Constructor<PlainObject>;
export declare type AnyFunction = (...args: Array<unknown>) => unknown | void;
export declare type Anything = PlainObject | string | number | bigint | boolean | symbol;
export declare function isPlainObject(obj: any): boolean;
export {};
